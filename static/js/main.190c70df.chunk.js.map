{"version":3,"sources":["../../src/context.ts","../../src/utils/subscription.ts","../../src/transaction.ts","../../src/batched.ts","../../src/atom.ts","../../src/utils/memoize.ts","../../src/molecule.ts","../../src/observe.ts","react/usePrevious.ts","state/request.ts","react/useConstant.ts","react/useConstructor.ts","react/useObservable.ts","Loader.tsx","ListItem.tsx","api.ts","Folders.tsx","Folder.tsx","Note.tsx","theme.ts","App.tsx","index.tsx"],"names":["createSubscriptionManager","reverse","subscribers","subscribe","subscriber","onSubscriberChange","count","length","s","notifySubscribers","transaction","managers","commitPhaseOne","commitPhaseTwo","rollback","commit","onCommitPhaseOne","onCommitPhaseTwo","onRollback","getCurrentTransaction","setCurrentTransaction","currentTransaction","batched","executor","returnVal","err","atom","value","transactionValues","observerChangeManager","manager","set","nextValue","setter","get","selector","x","onObserverChange","actions","options","defaultParamsEqual","params1","params2","Object","i","memoized","paramsEqual","prevArgs","prevReturn","fn","molecule","deriver","getChildrenValues","args","key","observable","children","memoizedDeriver","unsubscribeFromChildren","subscribeToChildren","transactionDerivers","unsubscribers","unsubscribe","transactionDeriver","observe","firstInvocation","transactions","runCleanup","cleanup","runEffect","state","effect","prevState","usePrevious","Status","ref","useRef","useEffect","current","useConstant","mapValues","obj","mapper","k","result","v","useConstructor","constructor","observed","unmountSubscribersRef","atoms","val","beforeUnmount","push","prevObserved","keys","forEach","is","useObservable","useState","setState","createRequest$","defaultData","status$","Initial","data$","error$","status","data","error","baseActions","setPending","Pending","setFulfilled","Fulfilled","setRejected","Rejected","invocationCount","execute","a","invocationNumber","prom","then","catch","isInitial","isPending","isFulfilled","isRejected","Loader","active","position","height","width","align","justify","bg","size","color","ListItem","title","description","otherProps","w","rounded","p","_hover","noOfLines","casing","fontSize","notes","id","folder","timeout","ms","Promise","resolve","setTimeout","fetchFolders","folders","reduce","note","add","Set","Array","from","fetchNotes","page","perPage","console","log","filteredNotes","filter","slice","fetchNote","find","updateNote","payload","map","Folders","selectedFolder","onFolderSelect","request$","api","request","h","overflow","onClick","Folder","selectedNote","onNoteSelect","Note","noteId","form$","setData","debouncedUpdateNote","debounce","fetchRequest$","updateRequest$","form","direction","src","alt","fontWeight","onChange","e","target","resize","display","focusBorderColor","boxSizing","fontStyle","minHeight","border","borderBottom","borderBottomColor","flex","theme","extendTheme","fonts","body","heading","mono","App","selectedFolder$","selectedNote$","borderRight","borderColor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.190c70df.chunk.js","sourcesContent":["import { Transaction } from './transaction'\n\nlet currentTransaction: Transaction | undefined\n\nexport const getCurrentTransaction = () => currentTransaction\nexport const setCurrentTransaction = (transaction: Transaction | undefined) => {\n  currentTransaction = transaction\n}\n","interface CreateSubscriptionManagerOptions {\n  onSubscriberChange?: (params: { count: number }) => void\n  reverse?: boolean\n}\n\nexport type Unsubscriber = () => void\n\nexport const createSubscriptionManager = <SubscriberArgs extends any[] = []>({\n  onSubscriberChange,\n  reverse = false\n}: CreateSubscriptionManagerOptions = {}) => {\n  type Subscriber = (...args: SubscriberArgs) => void\n  let subscribers: Subscriber[] = []\n  return {\n    subscribe: (subscriber: Subscriber): Unsubscriber => {\n      subscribers = reverse\n        ? [subscriber, ...subscribers]\n        : [...subscribers, subscriber]\n      onSubscriberChange && onSubscriberChange({ count: subscribers.length })\n      return () => {\n        subscribers = subscribers.filter((s) => s !== subscriber)\n        onSubscriberChange && onSubscriberChange({ count: subscribers.length })\n      }\n    },\n    notifySubscribers: (...args: SubscriberArgs) => {\n      subscribers.forEach((subscriber) => {\n        subscriber(...args)\n      })\n    }\n  }\n}\n","import { createSubscriptionManager } from './utils/subscription'\n\nexport type TransactionSubscriber = () => void\nexport type TransactionUnsubscriber = () => void\n\nexport interface Transaction {\n  commit: () => void\n  rollback: () => void\n  onCommitPhaseOne: (\n    subscriber: TransactionSubscriber\n  ) => TransactionUnsubscriber\n  onCommitPhaseTwo: (\n    subscriber: TransactionSubscriber\n  ) => TransactionUnsubscriber\n  onRollback: (subscriber: TransactionSubscriber) => TransactionUnsubscriber\n}\n\nexport const transaction = (): Transaction => {\n  const managers = {\n    commitPhaseOne: createSubscriptionManager(),\n    commitPhaseTwo: createSubscriptionManager(),\n    rollback: createSubscriptionManager()\n  }\n\n  const commit = () => {\n    managers.commitPhaseOne.notifySubscribers()\n    managers.commitPhaseTwo.notifySubscribers()\n  }\n  const rollback = () => {\n    managers.rollback.notifySubscribers()\n  }\n  const onCommitPhaseOne = (subscriber: () => void) => {\n    return managers.commitPhaseOne.subscribe(subscriber)\n  }\n  const onCommitPhaseTwo = (subscriber: () => void) => {\n    return managers.commitPhaseTwo.subscribe(subscriber)\n  }\n  const onRollback = (subscriber: () => void) => {\n    return managers.rollback.subscribe(subscriber)\n  }\n  return {\n    commit,\n    rollback,\n    onCommitPhaseOne,\n    onCommitPhaseTwo,\n    onRollback\n  }\n}\n","import { transaction } from './transaction'\nimport { getCurrentTransaction, setCurrentTransaction } from './context'\n\nexport const batched = <ExecutorParams extends any[], ExecutorReturn>(\n  executor: (...args: ExecutorParams) => ExecutorReturn\n) => {\n  return (...args: ExecutorParams): ExecutorReturn => {\n    // nested batch calls should be ignored in favor of the outermost\n    let currentTransaction = getCurrentTransaction()\n    if (currentTransaction) {\n      //no-op\n      return executor(...args)\n    } else {\n      currentTransaction = transaction()\n      setCurrentTransaction(currentTransaction)\n      try {\n        let returnVal = executor(...args)\n        setCurrentTransaction(undefined)\n        currentTransaction.commit()\n        return returnVal\n      } catch (err) {\n        setCurrentTransaction(undefined)\n        if (currentTransaction) {\n          currentTransaction.rollback()\n        }\n        throw err\n      }\n    }\n  }\n}\n","import { createSubscriptionManager } from './utils/subscription'\nimport { Transaction } from './transaction'\nimport { Observable, ObserverChangeSubscriber } from './observable'\nimport { batched } from './batched'\nimport { getCurrentTransaction } from './context'\n\nexport type Setter<State> = (value: State) => State\n\nexport type Set<State> = (\n  setter: State | Setter<State>,\n  transaction?: Transaction\n) => void\n\nexport interface AtomDefaultActions<State> {\n  set: Set<State>\n}\n\nexport interface Atom<State, Actions extends {} = AtomDefaultActions<State>>\n  extends Observable<State> {\n  actions: Actions\n}\n\nexport interface AtomOptions<\n  State,\n  Actions extends {} = AtomDefaultActions<State>\n> {\n  actions: (set: Set<State>) => Actions\n}\n\nexport const atom = <State, Actions extends {} = AtomDefaultActions<State>>(\n  defaultValue: State,\n  options?: AtomOptions<State, Actions>\n): Atom<State, Actions> => {\n  let value: State = defaultValue\n  const transactionValues = new WeakMap<Transaction, State>()\n  const observerChangeManager = createSubscriptionManager<\n    Parameters<ObserverChangeSubscriber>\n  >()\n  const manager = createSubscriptionManager<[Transaction]>({\n    onSubscriberChange: ({ count }) => {\n      observerChangeManager.notifySubscribers({ count })\n    }\n  })\n  const set = batched(\n    (\n      setter: Setter<State> | State,\n      transaction: Transaction = getCurrentTransaction() as Transaction\n    ) => {\n      // transaction will always exist because this function is batched\n      if (!transactionValues.has(transaction)) {\n        transaction.onCommitPhaseOne(() => {\n          value = transactionValues.get(transaction) as State\n          transactionValues.delete(transaction)\n        })\n        transaction.onRollback(() => {\n          transactionValues.delete(transaction)\n        })\n        transactionValues.set(transaction, value)\n      }\n      let nextValue: State\n      if (typeof setter === 'function') {\n        nextValue = (setter as Setter<State>)(\n          transactionValues.get(transaction) as State\n        )\n      } else {\n        nextValue = setter\n      }\n      transactionValues.set(transaction, nextValue)\n      manager.notifySubscribers(transaction)\n    }\n  )\n\n  return {\n    get: (\n      selector = (x) => x as any,\n      transaction = getCurrentTransaction()\n    ) => {\n      if (transaction && transactionValues.has(transaction)) {\n        return selector(transactionValues.get(transaction) as State)\n      }\n      return selector(value)\n    },\n    subscribe: (subscriber: (transaction: Transaction) => void) => {\n      return manager.subscribe(subscriber)\n    },\n    onObserverChange: (subscriber) => {\n      return observerChangeManager.subscribe(subscriber)\n    },\n    actions: options?.actions?.(set) || (({ set } as any) as Actions)\n  }\n}\n","export const defaultParamsEqual = (\n  params1: any[] | undefined,\n  params2: any[]\n) => {\n  if (params1 === undefined || params1.length !== params2.length) {\n    return false\n  }\n  for (const i in params1) {\n    if (!Object.is(params1[i], params2[i])) {\n      return false\n    }\n  }\n  return true\n}\n\nexport interface MemoizedOptions<Params> {\n  paramsEqual?: (prevParams: Params | undefined, currParams: Params) => boolean\n}\n\nexport const memoized = <Params extends any[], Return>(\n  fn: (...args: Params) => Return,\n  { paramsEqual = defaultParamsEqual }: MemoizedOptions<Params> = {}\n): ((...args: Params) => Return) => {\n  let prevArgs: Params | undefined\n  let prevReturn: any\n\n  return (...args) => {\n    if (!paramsEqual(prevArgs, args)) {\n      prevArgs = args\n      prevReturn = fn(...args)\n    }\n    return prevReturn\n  }\n}\n","import {\n  Observable,\n  ObservableMap,\n  ExtractObservableTypes,\n  ExtractObservableType,\n  ObserverChangeSubscriber,\n  ObservableUnsubscriber\n} from './observable'\nimport { Transaction } from './transaction'\nimport { getCurrentTransaction } from './context'\nimport { createSubscriptionManager, Unsubscriber } from './utils/subscription'\nimport { memoized, defaultParamsEqual } from './utils/memoize'\n\nconst paramsEqual = (params1: any[] | undefined, params2: any[]) => {\n  return defaultParamsEqual(\n    params1 && Object.values(params1[0]),\n    Object.values(params2[0])\n  )\n}\n\nexport type MoleculeDeriver<Deps extends ObservableMap, DerivedState> = (\n  args: {\n    [Index in keyof Deps]: ExtractObservableType<Deps[Index]>\n  }\n) => DerivedState\n\nexport interface Molecule<\n  Children extends ObservableMap,\n  Actions extends {} = Children,\n  DerivedState = ExtractObservableTypes<Children>\n> extends Observable<DerivedState> {\n  children: Children\n  actions: Actions\n}\n\nexport interface MoleculeOptions<\n  Children extends ObservableMap,\n  Actions extends {} = Children,\n  DerivedState = ExtractObservableTypes<Children>\n> {\n  actions?: (children: Children) => Actions\n  deriver?: MoleculeDeriver<Children, DerivedState>\n}\n\nexport const molecule = <\n  Children extends ObservableMap,\n  Actions extends {} = Children,\n  DerivedState = ExtractObservableTypes<Children>\n>(\n  children: Children,\n  {\n    actions,\n    deriver = (x) => x as DerivedState\n  }: MoleculeOptions<Children, Actions, DerivedState> = {}\n): Molecule<Children, Actions, DerivedState> => {\n  const getChildrenValues = (transaction?: Transaction): any => {\n    let args: any = {}\n    Object.keys(children).forEach((key) => {\n      const observable: any = children[key]\n      args[key] = observable.get((x: any) => x, transaction)\n    })\n    return args\n  }\n  const memoizedDeriver = memoized(deriver, { paramsEqual })\n  const observerChangeManager = createSubscriptionManager<\n    Parameters<ObserverChangeSubscriber>\n  >()\n  let unsubscribeFromChildren: Unsubscriber | undefined\n  const manager = createSubscriptionManager<[Transaction]>({\n    onSubscriberChange: ({ count }) => {\n      observerChangeManager.notifySubscribers({ count })\n      if (count > 0 && !unsubscribeFromChildren) {\n        unsubscribeFromChildren = subscribeToChildren()\n      } else if (count === 0 && unsubscribeFromChildren) {\n        unsubscribeFromChildren()\n        unsubscribeFromChildren = undefined\n      }\n    }\n  })\n  const transactionDerivers = new WeakMap<\n    Transaction,\n    MoleculeDeriver<Children, DerivedState>\n  >()\n\n  const subscribeToChildren = () => {\n    const unsubscribers: ObservableUnsubscriber[] = []\n    Object.values(children).forEach((observable: any) => {\n      const unsubscribe = observable.subscribe((transaction: Transaction) => {\n        if (!transactionDerivers.has(transaction)) {\n          transaction.onCommitPhaseOne(() => {\n            transactionDerivers.delete(transaction)\n          })\n          transaction.onRollback(() => {\n            transactionDerivers.delete(transaction)\n          })\n          transactionDerivers.set(\n            transaction,\n            memoized(deriver, { paramsEqual })\n          )\n        }\n        manager.notifySubscribers(transaction)\n      })\n      unsubscribers.push(unsubscribe)\n    })\n\n    const unsubscribeFromChildren = () => {\n      unsubscribers.forEach((unsubscribe) => unsubscribe())\n    }\n    return unsubscribeFromChildren\n  }\n\n  let observable: Observable<DerivedState> = {\n    get: (\n      selector = (x) => x as any,\n      transaction = getCurrentTransaction()\n    ) => {\n      if (transaction && transactionDerivers.has(transaction)) {\n        const transactionDeriver = transactionDerivers.get(transaction)\n        return selector(\n          transactionDeriver?.(getChildrenValues(transaction)) as DerivedState\n        )\n      }\n      return selector(memoizedDeriver(getChildrenValues()))\n    },\n    subscribe: (subscriber: (transaction: Transaction) => void) => {\n      return manager.subscribe(subscriber)\n    },\n    onObserverChange: (subscriber) => {\n      return observerChangeManager.subscribe(subscriber)\n    }\n  }\n\n  return {\n    ...observable,\n    children,\n    actions: actions?.(children) || ((children as any) as Actions)\n  }\n}\n","import { Transaction } from './transaction'\nimport { Observable } from './observable'\n\nexport type EffectCleanup = () => void\nexport type Effect<State> = (value: State) => EffectCleanup | void\nexport type Dispose = () => void\n\nexport const observe = <State>(\n  observable: Observable<State>,\n  effect: Effect<State>\n): Dispose => {\n  let cleanup: EffectCleanup | void\n  let prevState: State\n  let firstInvocation = true\n  const transactions = new Set<Transaction>()\n  const runCleanup = () => {\n    if (typeof cleanup === 'function') {\n      cleanup()\n    }\n  }\n  const runEffect = () => {\n    let state = observable.get()\n    if (firstInvocation || !Object.is(prevState, state)) {\n      runCleanup()\n      cleanup = effect(state)\n      prevState = state\n      firstInvocation = false\n    }\n  }\n\n  const unsubscribe = observable.subscribe((transaction) => {\n    if (transaction) {\n      if (!transactions.has(transaction)) {\n        transactions.add(transaction)\n        transaction.onCommitPhaseTwo(() => {\n          runEffect()\n          transactions.delete(transaction)\n        })\n        transaction.onRollback(() => {\n          transactions.delete(transaction)\n        })\n      }\n    } else {\n      runEffect()\n    }\n  })\n\n  runEffect()\n\n  const dispose = () => {\n    unsubscribe()\n    runCleanup()\n  }\n\n  return dispose\n}\n","import { useRef, useEffect } from 'react'\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T | undefined>()\n  useEffect(() => {\n    ref.current = value\n  }, [value])\n  return ref.current\n}\n\nexport default usePrevious\n","import { atom, molecule, batched } from 'elementos'\n\nenum Status {\n  Initial = 'initial',\n  Pending = 'pending',\n  Fulfilled = 'fulfilled',\n  Rejected = 'rejected'\n}\n\n// export const createRequest$ = <T>(initialData: T) => {\n//   const status$ = atom(Status.Initial)\n//   const data$ = atom(initialData)\n//   const error$ = atom(null as Error | null)\n\n//   return molecule(\n//     {\n//       status: status$,\n//       data: data$,\n//       error: error$\n//     },\n//     {\n//       actions: ({ status, data, error }) => {\n//         const baseActions = {\n//           setPending: batched(() => {\n//             status.actions.set(Status.Pending)\n//             error.actions.set(null)\n//           }),\n//           setFulfilled: batched((result) => {\n//             status.actions.set(Status.Fulfilled)\n//             data.actions.set(result)\n//             error.actions.set(null)\n//           }),\n//           setRejected: batched((err) => {\n//             status.actions.set(Status.Rejected)\n//             error.actions.set(err)\n//           })\n//         }\n//       },\n//       deriver: ({ status, data, error }) => {\n//         return {\n//           isInitial: status === Status.Initial,\n//           isPending: status === Status.Pending,\n//           isFulfilled: status === Status.Fulfilled,\n//           isRejected: status === Status.Rejected,\n//           status,\n//           data,\n//           error\n//         }\n//       }\n//     }\n//   )\n// }\n\nexport type CreateRequestOptions<T> = {\n  defaultData?: T\n}\n\nexport const createRequest$ = <ExecutorParams extends any[], ExecutorReturn>(\n  executor: (...args: ExecutorParams) => Promise<ExecutorReturn>,\n  { defaultData }: CreateRequestOptions<ExecutorReturn> = {}\n) => {\n  const status$ = atom(Status.Initial)\n  const data$ = atom(defaultData)\n  const error$ = atom(null as Error | null)\n\n  return molecule(\n    {\n      status: status$,\n      data: data$,\n      error: error$\n    },\n    {\n      actions: ({ status, data, error }) => {\n        const baseActions = {\n          setPending: batched(() => {\n            status.actions.set(Status.Pending)\n            error.actions.set(null)\n          }),\n          setFulfilled: batched((result) => {\n            status.actions.set(Status.Fulfilled)\n            data.actions.set(result)\n            error.actions.set(null)\n          }),\n          setRejected: batched((err) => {\n            status.actions.set(Status.Rejected)\n            error.actions.set(err)\n          })\n        }\n        let invocationCount = 0\n        const execute = async (\n          ...args: ExecutorParams\n        ): Promise<ExecutorReturn> => {\n          let invocationNumber = ++invocationCount\n          baseActions.setPending()\n          const prom = executor(...args)\n          prom\n            .then((data) => {\n              if (invocationNumber !== invocationCount) {\n                return\n              }\n              baseActions.setFulfilled(data)\n            })\n            .catch((err) => {\n              if (invocationNumber !== invocationCount) {\n                return\n              }\n              baseActions.setRejected(err)\n            })\n          return prom\n        }\n        return {\n          ...baseActions,\n          execute\n        }\n      },\n      deriver: ({ status, data, error }) => {\n        return {\n          isInitial: status === Status.Initial,\n          isPending: status === Status.Pending,\n          isFulfilled: status === Status.Fulfilled,\n          isRejected: status === Status.Rejected,\n          status,\n          data,\n          error\n        }\n      }\n    }\n  )\n}\n","import { useRef } from 'react'\n\nconst useConstant = <T>(fn: () => T): T => {\n  const ref = useRef<null | { value: T }>(null)\n  if (ref.current == null) {\n    // we instantiate { value } to not conflict with returned null\n    ref.current = { value: fn() }\n  }\n  return ref.current.value\n}\n\nexport default useConstant\n","import { useEffect, useRef } from 'react'\nimport { Atom, atom, batched } from 'elementos'\nimport usePrevious from './usePrevious'\nimport useConstant from './useConstant'\n\nexport type UnmountSubscriber = () => void\nexport type Constructor<T, Atoms> = (params: {\n  beforeUnmount: (subscriber: UnmountSubscriber) => void\n  atoms: Atoms\n}) => T\n\nconst mapValues = <Obj extends {}>(obj: Obj, mapper: (val: any) => any) => {\n  var k, result, v\n  result = {}\n  for (k in obj) {\n    v = obj[k]\n    result[k] = mapper(v)\n  }\n  return result as { [K in keyof Obj]: any }\n}\n\ntype Atoms<Observed> = { [K in keyof Observed]: Atom<Observed[K]> }\n\nexport const useConstructor = <T, Observed extends {} = {}>(\n  constructor: Constructor<T, Atoms<Observed>>,\n  observed: Observed = {} as Observed\n): T => {\n  const unmountSubscribersRef = useRef<UnmountSubscriber[]>([])\n  const atoms = useConstant<Atoms<Observed>>(() => {\n    return mapValues(observed, (val) => atom(val))\n  })\n\n  const state = useConstant(() => {\n    const beforeUnmount = (subscriber: UnmountSubscriber) => {\n      unmountSubscribersRef.current.push(subscriber)\n    }\n    return constructor({ beforeUnmount, atoms })\n  })\n\n  const prevObserved = usePrevious(observed)\n\n  useEffect(() => {\n    if (!prevObserved) {\n      return\n    }\n    // update atoms if pbserved values have changed\n    batched(() => {\n      Object.keys(atoms).forEach((key) => {\n        if (!Object.is(prevObserved[key], observed[key])) {\n          atoms[key].actions.set(() => observed[key])\n        }\n      })\n    })()\n  })\n\n  useEffect(() => {\n    return () => {\n      unmountSubscribersRef.current.forEach((subscriber) => {\n        subscriber()\n      })\n    }\n  }, [])\n\n  return state\n}\n","import { useState, useEffect } from 'react'\nimport { Observable, observe, ExtractObservableType } from 'elementos'\n\nexport const useObservable = <T extends Observable<any>>(\n  observable: T\n): ExtractObservableType<T> => {\n  const [state, setState] = useState<ExtractObservableType<T>>(observable.get())\n\n  useEffect(() => {\n    return observe(observable, (value) => {\n      setState(value)\n    })\n  }, [observable])\n\n  return state\n}\n","import React, { FC } from 'react'\nimport { Spinner, Flex } from '@chakra-ui/react'\n\ninterface LoaderProps {\n  active: boolean\n}\n\nconst Loader: FC<LoaderProps> = ({ active }) => {\n  if (!active) {\n    return null\n  }\n  return (\n    <Flex\n      position='absolute'\n      height='100%'\n      width='100%'\n      align='center'\n      justify='center'\n      bg='white'\n    >\n      <Spinner size='lg' color='purple.600' />\n    </Flex>\n  )\n}\n\nexport default Loader\n","import React, { FC } from 'react'\nimport {\n  ListItem as ChakraListItem,\n  ListItemProps as ChakraListItemProps,\n  Text\n} from '@chakra-ui/react'\n\ninterface ListItemProps extends ChakraListItemProps {\n  title: string\n  description?: string\n  active?: boolean\n}\n\nconst ListItem: FC<ListItemProps> = ({\n  title,\n  description,\n  active,\n  ...otherProps\n}) => {\n  return (\n    <ChakraListItem\n      w='100%'\n      rounded={0}\n      bg={active ? 'purple.200' : 'none'}\n      p={2}\n      _hover={{\n        bg: active ? 'purple.200' : 'purple.100'\n      }}\n      {...otherProps}\n    >\n      <Text noOfLines={1} casing='uppercase' fontSize='sm'>\n        {title}\n      </Text>\n      {description && (\n        <Text noOfLines={2} fontSize='xs'>\n          {description}\n        </Text>\n      )}\n    </ChakraListItem>\n  )\n}\n\nexport default ListItem\n","export type FetchNotesOptions = {\n  page?: number\n  perPage?: number\n  folder?: string | null\n}\n\nexport type Note = {\n  id: number\n  folder: string | null\n  title: string\n  description: string\n}\n\nlet notes: Note[] = [\n  {\n    id: 1,\n    folder: 'recipes',\n    title:\n      'sunt aut facere repellat provident occaecati excepturi optio reprehenderit',\n    description:\n      'quia et suscipit\\nsuscipit recusandae consequuntur expedita et cum\\nreprehenderit molestiae ut ut quas totam\\nnostrum rerum est autem sunt rem eveniet architecto'\n  },\n  {\n    id: 2,\n    folder: 'project ideas',\n    title: 'qui est esse',\n    description:\n      'est rerum tempore vitae\\nsequi sint nihil reprehenderit dolor beatae ea dolores neque\\nfugiat blanditiis voluptate porro vel nihil molestiae ut reiciendis\\nqui aperiam non debitis possimus qui neque nisi nulla'\n  },\n  {\n    id: 3,\n    folder: 'gift ideas',\n    title: 'ea molestias quasi exercitationem repellat qui ipsa sit aut',\n    description:\n      'et iusto sed quo iure\\nvoluptatem occaecati omnis eligendi aut ad\\nvoluptatem doloribus vel accusantium quis pariatur\\nmolestiae porro eius odio et labore et velit aut'\n  },\n  {\n    id: 4,\n    folder: 'recipes',\n    title: 'eum et est occaecati',\n    description:\n      'ullam et saepe reiciendis voluptatem adipisci\\nsit amet autem assumenda provident rerum culpa\\nquis hic commodi nesciunt rem tenetur doloremque ipsam iure\\nquis sunt voluptatem rerum illo velit'\n  },\n  {\n    id: 5,\n    folder: 'recipes',\n    title: 'nesciunt quas odio',\n    description:\n      'repudiandae veniam quaerat sunt sed\\nalias aut fugiat sit autem sed est\\nvoluptatem omnis possimus esse voluptatibus quis\\nest aut tenetur dolor neque'\n  },\n  {\n    id: 6,\n    folder: 'gift ideas',\n    title: 'dolorem eum magni eos aperiam quia',\n    description:\n      'ut aspernatur corporis harum nihil quis provident sequi\\nmollitia nobis aliquid molestiae\\nperspiciatis et ea nemo ab reprehenderit accusantium quas\\nvoluptate dolores velit et doloremque molestiae'\n  },\n  {\n    id: 7,\n    folder: 'gift ideas',\n    title: 'magnam facilis autem',\n    description:\n      'dolore placeat quibusdam ea quo vitae\\nmagni quis enim qui quis quo nemo aut saepe\\nquidem repellat excepturi ut quia\\nsunt ut sequi eos ea sed quas'\n  },\n  {\n    id: 8,\n    folder: null,\n    title: 'dolorem dolore est ipsam',\n    description:\n      'dignissimos aperiam dolorem qui eum\\nfacilis quibusdam animi sint suscipit qui sint possimus cum\\nquaerat magni maiores excepturi\\nipsam ut commodi dolor voluptatum modi aut vitae'\n  },\n  {\n    id: 9,\n    folder: 'project ideas',\n    title: 'nesciunt iure omnis dolorem tempora et accusantium',\n    description:\n      'consectetur animi nesciunt iure dolore\\nenim quia ad\\nveniam autem ut quam aut nobis\\net est aut quod aut provident voluptas autem voluptas'\n  },\n  {\n    id: 10,\n    folder: null,\n    title: 'optio molestias id quia eum',\n    description:\n      'quo et expedita modi cum officia vel magni\\ndoloribus qui repudiandae\\nvero nisi sit\\nquos veniam quod sed accusamus veritatis error'\n  },\n  {\n    id: 11,\n    folder: 'project ideas',\n    title: 'et ea vero quia laudantium autem',\n    description:\n      'delectus reiciendis molestiae occaecati non minima eveniet qui voluptatibus\\naccusamus in eum beatae sit\\nvel qui neque voluptates ut commodi qui incidunt\\nut animi commodi'\n  },\n  {\n    id: 12,\n    folder: 'project ideas',\n    title: 'in quibusdam tempore odit est dolorem',\n    description:\n      'itaque id aut magnam\\npraesentium quia et ea odit et ea voluptas et\\nsapiente quia nihil amet occaecati quia id voluptatem\\nincidunt ea est distinctio odio'\n  },\n  {\n    id: 13,\n    folder: 'gift ideas',\n    title: 'dolorum ut in voluptas mollitia et saepe quo animi',\n    description:\n      'aut dicta possimus sint mollitia voluptas commodi quo doloremque\\niste corrupti reiciendis voluptatem eius rerum\\nsit cumque quod eligendi laborum minima\\nperferendis recusandae assumenda consectetur porro architecto ipsum ipsam'\n  },\n  {\n    id: 14,\n    folder: 'project ideas',\n    title: 'voluptatem eligendi optio',\n    description:\n      'fuga et accusamus dolorum perferendis illo voluptas\\nnon doloremque neque facere\\nad qui dolorum molestiae beatae\\nsed aut voluptas totam sit illum'\n  },\n  {\n    id: 15,\n    folder: null,\n    title: 'eveniet quod temporibus',\n    description:\n      'reprehenderit quos placeat\\nvelit minima officia dolores impedit repudiandae molestiae nam\\nvoluptas recusandae quis delectus\\nofficiis harum fugiat vitae'\n  }\n]\n\nconst timeout = (ms: number) =>\n  new Promise((resolve) => setTimeout(resolve, ms))\n\nexport const fetchFolders = async () => {\n  await timeout(750)\n  const folders = notes.reduce((set, note) => {\n    if (note.folder) {\n      set.add(note.folder)\n    }\n    return set\n  }, new Set<string>())\n  return Array.from(folders)\n}\n\nexport const fetchNotes = async ({\n  page = 1,\n  perPage = 10,\n  folder\n}: FetchNotesOptions = {}) => {\n  console.log('FETCHING NOTES')\n  await timeout(750)\n  let filteredNotes = notes.filter((note) => {\n    return folder == null ? true : note.folder === folder\n  })\n  return filteredNotes.slice((page - 1) * perPage, page * perPage)\n}\n\nexport const fetchNote = async (id: number) => {\n  console.log('FETCHING NOTE: ' + id)\n  await timeout(750)\n  const note = notes.find((note) => note.id === id)\n  return note != null\n    ? {\n        ...note\n      }\n    : null\n}\n\ntype UpdateNotePayload = {\n  title?: string\n  description?: string\n}\n\nexport const updateNote = async (id: number, payload: UpdateNotePayload) => {\n  console.log('UPDATING NOTE: ' + id)\n  await timeout(750)\n  notes = notes.map((note) => {\n    if (note.id === id) {\n      return {\n        ...note,\n        ...payload\n      }\n    }\n    return note\n  })\n}\n","import React, { FC } from 'react'\nimport { Stack, StackProps, List } from '@chakra-ui/react'\nimport { useConstructor } from './react/useConstructor'\nimport { createRequest$ } from './state/request'\nimport { useObservable } from './react/useObservable'\nimport Loader from './Loader'\nimport ListItem from './ListItem'\nimport * as api from './api'\n\ninterface FoldersProps extends StackProps {\n  selectedFolder: string | null\n  onFolderSelect: (folder: string | null) => void\n}\n\nconst Folders: FC<FoldersProps> = ({\n  selectedFolder,\n  onFolderSelect,\n  ...otherProps\n}) => {\n  // initializer runs only once on first render\n  const { request$ } = useConstructor(() => {\n    const request$ = createRequest$(api.fetchFolders)\n    request$.actions.execute()\n    return {\n      request$\n    }\n  })\n\n  // request$ observable is translated to react state\n  const request = useObservable(request$)\n\n  return (\n    <Stack {...otherProps} position='relative'>\n      <Loader active={request.isPending} />\n      <List h='100%' overflow='auto'>\n        <ListItem\n          key={'all'}\n          onClick={() => {\n            onFolderSelect(null)\n          }}\n          active={selectedFolder === null}\n          title={'All'}\n        />\n        {request.data?.map((folder) => (\n          <ListItem\n            key={folder}\n            onClick={() => {\n              onFolderSelect(folder)\n            }}\n            active={selectedFolder === folder}\n            title={folder}\n          />\n        ))}\n      </List>\n    </Stack>\n  )\n}\n\nexport default Folders\n","import React, { FC } from 'react'\nimport { Stack, StackProps, List } from '@chakra-ui/react'\nimport { observe } from 'elementos'\nimport { useConstructor } from './react/useConstructor'\nimport { createRequest$ } from './state/request'\nimport { useObservable } from './react/useObservable'\nimport Loader from './Loader'\nimport ListItem from './ListItem'\nimport * as api from './api'\n\ninterface FolderProps extends StackProps {\n  folder: string | null\n  selectedNote: number | null\n  onNoteSelect: (noteId: number) => void\n}\n\nconst Folder: FC<FolderProps> = ({\n  folder,\n  selectedNote,\n  onNoteSelect,\n  ...otherProps\n}) => {\n  const { request$ } = useConstructor(\n    ({ atoms, beforeUnmount }) => {\n      const request$ = createRequest$(api.fetchNotes)\n      beforeUnmount(\n        observe(atoms.folder, (folder) => {\n          request$.actions.execute({ folder })\n        })\n      )\n      return {\n        request$\n      }\n    },\n    {\n      folder\n    }\n  )\n\n  const request = useObservable(request$)\n\n  return (\n    <Stack {...otherProps} position='relative'>\n      <Loader active={request.isPending} />\n      <List h='100%' overflow='auto'>\n        {request.data?.map((note) => (\n          <ListItem\n            key={note.id}\n            onClick={() => {\n              onNoteSelect(note.id)\n            }}\n            active={selectedNote === note.id}\n            title={note.title}\n            description={note.description}\n          />\n        ))}\n      </List>\n    </Stack>\n  )\n}\n\nexport default Folder\n","import React, { FC } from 'react'\nimport debounce from 'lodash/debounce'\nimport { Textarea, Flex, FlexProps, Text } from '@chakra-ui/react'\nimport { molecule, observe, atom, batched } from 'elementos'\nimport { useConstructor } from './react/useConstructor'\nimport { createRequest$ } from './state/request'\nimport { useObservable } from './react/useObservable'\nimport Loader from './Loader'\nimport * as api from './api'\n\ninterface NoteProps extends FlexProps {\n  noteId: number | null\n}\n\nconst Note: FC<NoteProps> = ({ noteId, ...otherProps }) => {\n  const { form$, fetchRequest$ } = useConstructor(\n    ({ atoms, beforeUnmount }) => {\n      const form$ = molecule(\n        {\n          title: atom(''),\n          description: atom('')\n        },\n        {\n          actions: ({ title, description }) => ({\n            setData: batched((data: any) => {\n              title.actions.set(data.title)\n              description.actions.set(data.description)\n            }),\n            title,\n            description\n          })\n        }\n      )\n\n      const debouncedUpdateNote = debounce(api.updateNote, 1000)\n\n      const fetchRequest$ = createRequest$(api.fetchNote)\n      const updateRequest$ = createRequest$(async (id, payload) => {\n        debouncedUpdateNote(id, payload)\n      })\n\n      beforeUnmount(\n        observe(atoms.noteId, (id) => {\n          // whenever noteId changes via props, refetch note\n          if (id) {\n            fetchRequest$.actions.execute(id)\n          }\n        })\n      )\n\n      beforeUnmount(\n        observe(fetchRequest$, ({ isFulfilled, data }) => {\n          // whenever refetch succeeds, update the form data\n          if (isFulfilled) {\n            form$.actions.setData(data)\n          }\n        })\n      )\n\n      beforeUnmount(\n        observe(form$, (form) => {\n          // whenever form data changes, get note id and update note\n          updateRequest$.actions.execute(atoms.noteId.get(), form)\n        })\n      )\n\n      return {\n        form$,\n        fetchRequest$\n      }\n    },\n    {\n      noteId // track value of noteId over time as an atom\n    }\n  )\n\n  const request = useObservable(fetchRequest$)\n  const form = useObservable(form$)\n\n  return (\n    <Flex {...otherProps} direction='column' position='relative'>\n      {noteId === null && (\n        <Flex h='100%' direction='column' justify='center' align='center'>\n          <img src='empty.svg' alt='No note selected' width='200' />\n          <Text fontWeight='600' size='xl' p='4'>\n            No note selected\n          </Text>\n        </Flex>\n      )}\n      {noteId && (\n        <>\n          <Loader active={request.isPending} />\n          {request.isFulfilled && (\n            <>\n              <Textarea\n                value={form.title}\n                onChange={(e) => {\n                  form$.actions.title.actions.set(e.target.value)\n                }}\n                resize='none'\n                rounded='0'\n                p={2}\n                display='block'\n                focusBorderColor='transparent'\n                boxSizing='border-box'\n                size='lg'\n                fontStyle='bold'\n                minHeight='64px'\n                border='none'\n              />\n              <Flex borderBottom='2px' borderBottomColor='purple.300' />\n              <Textarea\n                value={form.description}\n                onChange={(e) => {\n                  form$.actions.description.actions.set(e.target.value)\n                }}\n                flex='1'\n                resize='none'\n                rounded='0'\n                p={2}\n                display='block'\n                focusBorderColor='transparent'\n                boxSizing='border-box'\n                size='sm'\n                border='none'\n              />\n            </>\n          )}\n        </>\n      )}\n    </Flex>\n  )\n}\n\nexport default Note\n","import { extendTheme } from '@chakra-ui/react'\n\n// 2. Call `extendTheme` and pass your custom values\nexport const theme = extendTheme({\n  fonts: {\n    body: 'Poppins, sans-serif',\n    heading: 'Poppins, serif',\n    mono: 'Menlo, monospace'\n  }\n})\n","import React from 'react'\nimport { Flex, ChakraProvider } from '@chakra-ui/react'\nimport { atom } from 'elementos'\nimport { useConstructor } from './react/useConstructor'\nimport { useObservable } from './react/useObservable'\nimport Folders from './Folders'\nimport Folder from './Folder'\nimport Note from './Note'\nimport { theme } from './theme'\n\nconst App = () => {\n  const { selectedFolder$, selectedNote$ } = useConstructor(() => {\n    const selectedFolder$ = atom<string | null>(null)\n    const selectedNote$ = atom<number | null>(null)\n\n    return {\n      selectedFolder$,\n      selectedNote$\n    }\n  })\n\n  const selectedFolder = useObservable(selectedFolder$)\n  const selectedNote = useObservable(selectedNote$)\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Flex h='100%' color='purple.700'>\n        <Folders\n          w={240}\n          selectedFolder={selectedFolder}\n          onFolderSelect={selectedFolder$.actions.set}\n          borderRight='2px'\n          borderColor='purple.300'\n        />\n        <Folder\n          folder={selectedFolder}\n          selectedNote={selectedNote}\n          onNoteSelect={selectedNote$.actions.set}\n          w={320}\n          borderRight='2px'\n          borderColor='purple.300'\n        />\n        <Note noteId={selectedNote || null} flex={1} />\n      </Flex>\n    </ChakraProvider>\n  )\n}\n\nexport default App\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}